import { Location } from "../location";

export class ExpandAreaCircular{
    /**
     * Expands the initial position in a circular pattern.
     * @param {*} inputLocation Initial location 
     * @param {*} prevLocations List of locations that are already set
     * @param {*} rng Random number generator
     * @return List of new locations generated by the algorithm. 
     */
    runAlgorithm(inputLocation, prevLocations, rng, min = 3, max = 7){
        if(!(inputLocation instanceof Location)){
            console.log("HERE");
        }
        
        function getDistance(point){
            const xSquared = Math.pow(inputLocation.x - point.x, 2);
            const ySquared = Math.pow(inputLocation.y - point.y, 2);
            return Math.sqrt(xSquared + ySquared);
        }
        function isWithinRadius(point){
            return getDistance(point) <= radius;
        }

        const radius = Math.floor(rng() * (max - min)) + min;

        //TODO: Actually review BFS (Or rather, flood fill).
        const toExpandOn = [inputLocation];
        const checkedPositions = prevLocations.concat([inputLocation]);
        const result = [];
        while(toExpandOn.length > 0){
            const currentLocation = toExpandOn.pop();
            result.push(currentLocation);

            const newLocations = [
                new Location(
                    {...currentLocation.baseLocation}, 
                    currentLocation.x - 1, 
                    currentLocation.y),
                new Location(
                    {...currentLocation.baseLocation}, 
                    currentLocation.x + 1, 
                    currentLocation.y),
                new Location(
                    {...currentLocation.baseLocation}, 
                    currentLocation.x, 
                    currentLocation.y - 1),
                new Location(
                    {...currentLocation.baseLocation}, 
                    currentLocation.x, 
                    currentLocation.y + 1),   
            ];

            newLocations.forEach(value => {
                if(!isWithinRadius(value)){return}

                const duplicates = checkedPositions.filter(checkedPos => {
                    return checkedPos.comparePositions(value);
                });

                if(duplicates.length === 0){
                    toExpandOn.push(value);
                    checkedPositions.push(value);
                }
            });
        }

        return result;
    }
}